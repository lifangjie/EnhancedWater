#pragma kernel CSMain

#define UNITY_PI            3.14159265359f

uniform float Length;
uniform float Gravity;
uniform int Size;
uniform float Time;
Texture2D<float4> h0Tex;

RWTexture2D<float2> Hkt;
RWTexture2D<float2> Dx;
RWTexture2D<float2> Dz;
        
float Dispersion(float kLength) {
    return sqrt(Gravity * kLength);
}

float2 ComplexMultiply(float2 a, float2 b) {
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 HTilde(float2 h0, float2 h0Mkconj, float kLength) {
    
    float omegat = Dispersion(kLength) * Time;

    float cosTemp;
    float sinTemp;
    sincos(omegat, sinTemp, cosTemp);

    float2 c0 = float2(cosTemp, sinTemp);
    float2 c1 = float2(cosTemp, -sinTemp);

    return ComplexMultiply(h0, c0) + ComplexMultiply(h0Mkconj, c1);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 k = float2(UNITY_PI * (2 * float(id.x) - Size) / Length, UNITY_PI * (2 * float(id.y) - Size) / Length);
    float kLength = length(k);
    float4 h0 = h0Tex[id.xy];
    float2 hkt = HTilde(h0.xy, h0.zw, kLength);
    
    float2 dx = ComplexMultiply(hkt, float2(0, -k.x / kLength));
    float2 dz = ComplexMultiply(hkt, float2(0, -k.y / kLength));
    
    //temp
    Hkt[id.xy] = hkt;
    Dx[id.xy] = dx;
    Dz[id.xy] = dz;
    //fft
    
    
    int2 signs = int2(1, -1);
    int sign = signs[(id.x + id.y) & 1];
    
    
    
    float height = hkt.x * signs;
    
}